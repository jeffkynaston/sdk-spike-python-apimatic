# -*- coding: utf-8 -*-

"""
plastiqpublicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from plastiqpublicapi.models.amount_details import AmountDetails
from plastiqpublicapi.models.payment_details import PaymentDetails


class PatchPaymentIntentRequestPayload(object):

    """Implementation of the 'PatchPaymentIntentRequestPayload' model.

    TODO: type model description here.

    Attributes:
        target_amount (AmountDetails): TODO: type description here.
        details (PaymentDetails): TODO: type description here.
        metadata (object): additional payment information to support
            operational requirements

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "target_amount": 'targetAmount',
        "details": 'details',
        "metadata": 'metadata'
    }

    def __init__(self,
                 target_amount=None,
                 details=None,
                 metadata=None):
        """Constructor for the PatchPaymentIntentRequestPayload class"""

        # Initialize members of the class
        self.target_amount = target_amount
        self.details = details
        self.metadata = metadata

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        target_amount = AmountDetails.from_dictionary(dictionary.get('targetAmount')) if dictionary.get('targetAmount') else None
        details = PaymentDetails.from_dictionary(dictionary.get('details')) if dictionary.get('details') else None
        metadata = dictionary.get('metadata')

        # Return an object of this model
        return cls(target_amount,
                   details,
                   metadata)
