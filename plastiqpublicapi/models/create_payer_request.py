# -*- coding: utf-8 -*-

"""
plastiqpublicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from plastiqpublicapi.models.address import Address
from plastiqpublicapi.models.identity_documents import IdentityDocuments


class CreatePayerRequest(object):

    """Implementation of the 'CreatePayerRequest' model.

    TODO: type model description here.

    Attributes:
        business_name (string): TODO: type description here.
        contact (object): TODO: type description here.
        business_address (Address): TODO: type description here.
        identity_documents (list of IdentityDocuments): TODO: type description
            here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "contact": 'contact',
        "business_name": 'businessName',
        "business_address": 'businessAddress',
        "identity_documents": 'identityDocuments'
    }

    def __init__(self,
                 contact=None,
                 business_name=None,
                 business_address=None,
                 identity_documents=None):
        """Constructor for the CreatePayerRequest class"""

        # Initialize members of the class
        self.business_name = business_name
        self.contact = contact
        self.business_address = business_address
        self.identity_documents = identity_documents

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        contact = dictionary.get('contact')
        business_name = dictionary.get('businessName')
        business_address = Address.from_dictionary(dictionary.get('businessAddress')) if dictionary.get('businessAddress') else None
        identity_documents = None
        if dictionary.get('identityDocuments') is not None:
            identity_documents = [IdentityDocuments.from_dictionary(x) for x in dictionary.get('identityDocuments')]

        # Return an object of this model
        return cls(contact,
                   business_name,
                   business_address,
                   identity_documents)
