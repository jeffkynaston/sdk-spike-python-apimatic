# -*- coding: utf-8 -*-

"""
plastiqpublicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from plastiqpublicapi.models.contact import Contact
from plastiqpublicapi.models.payer_id import PayerId
from plastiqpublicapi.models.recipient_address import RecipientAddress


class PatchRecipientRequest(object):

    """Implementation of the 'PatchRecipientRequest' model.

    TODO: type model description here.

    Attributes:
        business_name (string): TODO: type description here.
        business_address (RecipientAddress): TODO: type description here.
        contact (Contact): TODO: type description here.
        payer (PayerId): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "business_name": 'businessName',
        "business_address": 'businessAddress',
        "contact": 'contact',
        "payer": 'payer'
    }

    def __init__(self,
                 business_name=None,
                 business_address=None,
                 contact=None,
                 payer=None):
        """Constructor for the PatchRecipientRequest class"""

        # Initialize members of the class
        self.business_name = business_name
        self.business_address = business_address
        self.contact = contact
        self.payer = payer

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        business_name = dictionary.get('businessName')
        business_address = RecipientAddress.from_dictionary(dictionary.get('businessAddress')) if dictionary.get('businessAddress') else None
        contact = Contact.from_dictionary(dictionary.get('contact')) if dictionary.get('contact') else None
        payer = PayerId.from_dictionary(dictionary.get('payer')) if dictionary.get('payer') else None

        # Return an object of this model
        return cls(business_name,
                   business_address,
                   contact,
                   payer)
