# -*- coding: utf-8 -*-

"""
plastiqpublicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from plastiqpublicapi.models.status_reason import StatusReason


class PaymentMethod(object):

    """Implementation of the 'PaymentMethod' model.

    TODO: type model description here.

    Attributes:
        id (uuid|string): TODO: type description here.
        mtype (Type2Enum): TODO: type description here.
        data (object): TODO: type description here.
        status (PaymentMethodStatusEnum): TODO: type description here.
        status_reasons (list of StatusReason): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "mtype": 'type',
        "data": 'data',
        "status": 'status',
        "status_reasons": 'statusReasons'
    }

    def __init__(self,
                 id=None,
                 mtype=None,
                 data=None,
                 status=None,
                 status_reasons=None):
        """Constructor for the PaymentMethod class"""

        # Initialize members of the class
        self.id = id
        self.mtype = mtype
        self.data = data
        self.status = status
        self.status_reasons = status_reasons

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get('id')
        mtype = dictionary.get('type')
        data = dictionary.get('data')
        status = dictionary.get('status')
        status_reasons = None
        if dictionary.get('statusReasons') is not None:
            status_reasons = [StatusReason.from_dictionary(x) for x in dictionary.get('statusReasons')]

        # Return an object of this model
        return cls(id,
                   mtype,
                   data,
                   status,
                   status_reasons)
