# -*- coding: utf-8 -*-

"""
plastiqpublicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from plastiqpublicapi.api_helper import APIHelper
from plastiqpublicapi.models.fee import Fee
from plastiqpublicapi.models.payer_id import PayerId
from plastiqpublicapi.models.payment_details import PaymentDetails
from plastiqpublicapi.models.payment_method_id import PaymentMethodId
from plastiqpublicapi.models.recipient_id import RecipientId
from plastiqpublicapi.models.source_amount import SourceAmount
from plastiqpublicapi.models.target_amount import TargetAmount


class Payment(object):

    """Implementation of the 'Payment' model.

    TODO: type model description here.

    Attributes:
        id (uuid|string): TODO: type description here.
        fees (list of Fee): TODO: type description here.
        source_amount (SourceAmount): TODO: type description here.
        target_amount (TargetAmount): TODO: type description here.
        payment_method (PaymentMethodId): TODO: type description here.
        recipient (RecipientId): TODO: type description here.
        payer (PayerId): TODO: type description here.
        details (PaymentDetails): TODO: type description here.
        delivery_date (date): TODO: type description here.
        created_at (datetime): TODO: type description here.
        status (PaymentStatusEnum): TODO: type description here.
        source_descriptor (string): TODO: type description here.
        target_descriptor (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "fees": 'fees',
        "source_amount": 'sourceAmount',
        "target_amount": 'targetAmount',
        "payment_method": 'paymentMethod',
        "recipient": 'recipient',
        "payer": 'payer',
        "details": 'details',
        "delivery_date": 'deliveryDate',
        "created_at": 'createdAt',
        "status": 'status',
        "source_descriptor": 'sourceDescriptor',
        "target_descriptor": 'targetDescriptor'
    }

    def __init__(self,
                 id=None,
                 fees=None,
                 source_amount=None,
                 target_amount=None,
                 payment_method=None,
                 recipient=None,
                 payer=None,
                 details=None,
                 delivery_date=None,
                 created_at=None,
                 status=None,
                 source_descriptor=None,
                 target_descriptor=None):
        """Constructor for the Payment class"""

        # Initialize members of the class
        self.id = id
        self.fees = fees
        self.source_amount = source_amount
        self.target_amount = target_amount
        self.payment_method = payment_method
        self.recipient = recipient
        self.payer = payer
        self.details = details
        self.delivery_date = delivery_date
        self.created_at = APIHelper.RFC3339DateTime(created_at) if created_at else None
        self.status = status
        self.source_descriptor = source_descriptor
        self.target_descriptor = target_descriptor

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get('id')
        fees = None
        if dictionary.get('fees') is not None:
            fees = [Fee.from_dictionary(x) for x in dictionary.get('fees')]
        source_amount = SourceAmount.from_dictionary(dictionary.get('sourceAmount')) if dictionary.get('sourceAmount') else None
        target_amount = TargetAmount.from_dictionary(dictionary.get('targetAmount')) if dictionary.get('targetAmount') else None
        payment_method = PaymentMethodId.from_dictionary(dictionary.get('paymentMethod')) if dictionary.get('paymentMethod') else None
        recipient = RecipientId.from_dictionary(dictionary.get('recipient')) if dictionary.get('recipient') else None
        payer = PayerId.from_dictionary(dictionary.get('payer')) if dictionary.get('payer') else None
        details = PaymentDetails.from_dictionary(dictionary.get('details')) if dictionary.get('details') else None
        delivery_date = dateutil.parser.parse(dictionary.get('deliveryDate')).date() if dictionary.get('deliveryDate') else None
        created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdAt")).datetime if dictionary.get("createdAt") else None
        status = dictionary.get('status')
        source_descriptor = dictionary.get('sourceDescriptor')
        target_descriptor = dictionary.get('targetDescriptor')

        # Return an object of this model
        return cls(id,
                   fees,
                   source_amount,
                   target_amount,
                   payment_method,
                   recipient,
                   payer,
                   details,
                   delivery_date,
                   created_at,
                   status,
                   source_descriptor,
                   target_descriptor)
