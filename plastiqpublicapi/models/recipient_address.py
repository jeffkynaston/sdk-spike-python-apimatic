# -*- coding: utf-8 -*-

"""
plastiqpublicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class RecipientAddress(object):

    """Implementation of the 'RecipientAddress' model.

    TODO: type model description here.

    Attributes:
        line_1 (string): Address line 1 (e.g., street, PO Box, or company
            name).
        line_2 (string): Address line 2 (e.g., apartment, suite, unit, or
            building).
        city (string): City, district, suburb, town, or village.
        state (string): State, county, province, or region.
        postal_code (string): ZIP or postal code.
        country (string): Two-letter country code (ISO 3166-1 alpha-2).

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "line_1": 'line1',
        "country": 'country',
        "line_2": 'line2',
        "city": 'city',
        "state": 'state',
        "postal_code": 'postalCode'
    }

    def __init__(self,
                 line_1=None,
                 country=None,
                 line_2=None,
                 city=None,
                 state=None,
                 postal_code=None):
        """Constructor for the RecipientAddress class"""

        # Initialize members of the class
        self.line_1 = line_1
        self.line_2 = line_2
        self.city = city
        self.state = state
        self.postal_code = postal_code
        self.country = country

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        line_1 = dictionary.get('line1')
        country = dictionary.get('country')
        line_2 = dictionary.get('line2')
        city = dictionary.get('city')
        state = dictionary.get('state')
        postal_code = dictionary.get('postalCode')

        # Return an object of this model
        return cls(line_1,
                   country,
                   line_2,
                   city,
                   state,
                   postal_code)
