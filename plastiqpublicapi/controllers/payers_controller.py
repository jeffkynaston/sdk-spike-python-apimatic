# -*- coding: utf-8 -*-

"""
plastiqpublicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from plastiqpublicapi.api_helper import APIHelper
from plastiqpublicapi.configuration import Server
from plastiqpublicapi.controllers.base_controller import BaseController
from plastiqpublicapi.http.auth.o_auth_2 import OAuth2
from plastiqpublicapi.models.payer import Payer
from plastiqpublicapi.exceptions.error_exception import ErrorException


class PayersController(BaseController):

    """A Controller to access Endpoints in the plastiqpublicapi API."""

    def __init__(self, config, call_back=None):
        super(PayersController, self).__init__(config, call_back)

    def create_a_payer(self,
                       body,
                       trace_id=None,
                       user_agent=None,
                       end_user_device_id=None,
                       end_user_ip=None):
        """Does a POST request to /payers.

        Create a Payer

        Args:
            body (CreatePayerRequest): Payer to create
            trace_id (string, optional): A valid UUID (V4) for tracing
                requests. Will be returned as a header. If not present or
                invalid, a generated UUID will be returned.
            user_agent (string, optional): A string representing the User
                Agent. Required only when the request is not coming from the
                end user's browser.
            end_user_device_id (string, optional): A unique identifier for the
                end user's browser. Recommended for compliance when the
                request is not coming from the end user's browser.
            end_user_ip (string, optional): The IP address of the end user.
                Recommended for compliance when the request is not coming from
                the end user's browser.

        Returns:
            Payer: Response from the API. Payer created successfully.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/payers'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'Trace-Id': trace_id,
            'User-Agent': user_agent,
            'End-User-Device-Id': end_user_device_id,
            'End-User-Ip': end_user_ip
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorException('Bad Request', _response)
        elif _response.status_code == 401:
            raise ErrorException('Unauthorized', _response)
        elif _response.status_code == 403:
            raise ErrorException('Forbidden', _response)
        elif _response.status_code == 404:
            raise ErrorException('Not found', _response)
        elif _response.status_code == 500:
            raise ErrorException('Internal Server Error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Payer.from_dictionary)

        return decoded

    def retrieve_a_payer(self,
                         id):
        """Does a GET request to /payers/{id}.

        Retrieve a Payer

        Args:
            id (uuid|string): The ID of the Payer

        Returns:
            Payer: Response from the API. Payer retrieved successfully.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/payers/{id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorException('Bad Request', _response)
        elif _response.status_code == 401:
            raise ErrorException('Unauthorized', _response)
        elif _response.status_code == 403:
            raise ErrorException('Forbidden', _response)
        elif _response.status_code == 404:
            raise ErrorException('Not found', _response)
        elif _response.status_code == 500:
            raise ErrorException('Internal Server Error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Payer.from_dictionary)

        return decoded

    def update_a_payer(self,
                       id,
                       body):
        """Does a PATCH request to /payers/{id}.

        Update a Payer

        Args:
            id (uuid|string): The ID of the Payer
            body (UpdatePayerRequest): Payer to update

        Returns:
            Payer: Response from the API. Payer updated successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/payers/{id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorException('Bad Request', _response)
        elif _response.status_code == 401:
            raise ErrorException('Unauthorized', _response)
        elif _response.status_code == 403:
            raise ErrorException('Forbidden', _response)
        elif _response.status_code == 404:
            raise ErrorException('Not found', _response)
        elif _response.status_code == 500:
            raise ErrorException('Internal Server Error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Payer.from_dictionary)

        return decoded

    def delete_a_payer(self,
                       id):
        """Does a DELETE request to /payers/{id}.

        Delete a Payer

        Args:
            id (uuid|string): The ID of the Payer

        Returns:
            void: Response from the API. Payer deleted successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/payers/{id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorException('Bad Request', _response)
        elif _response.status_code == 401:
            raise ErrorException('Unauthorized', _response)
        elif _response.status_code == 403:
            raise ErrorException('Forbidden', _response)
        elif _response.status_code == 404:
            raise ErrorException('Not found', _response)
        elif _response.status_code == 500:
            raise ErrorException('Internal Server Error', _response)
        self.validate_response(_response)
