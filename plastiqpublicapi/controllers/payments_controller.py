# -*- coding: utf-8 -*-

"""
plastiqpublicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from plastiqpublicapi.api_helper import APIHelper
from plastiqpublicapi.configuration import Server
from plastiqpublicapi.controllers.base_controller import BaseController
from plastiqpublicapi.http.auth.o_auth_2 import OAuth2
from plastiqpublicapi.models.payment import Payment
from plastiqpublicapi.models.payments_response import PaymentsResponse
from plastiqpublicapi.models.payment_refund import PaymentRefund
from plastiqpublicapi.models.payment_intent import PaymentIntent
from plastiqpublicapi.exceptions.error_exception import ErrorException


class PaymentsController(BaseController):

    """A Controller to access Endpoints in the plastiqpublicapi API."""

    def __init__(self, config, call_back=None):
        super(PaymentsController, self).__init__(config, call_back)

    def create_a_payment_from_a_payment_intent(self,
                                               body,
                                               trace_id=None,
                                               user_agent=None,
                                               end_user_device_id=None,
                                               end_user_ip=None,
                                               idempotency_key=None):
        """Does a POST request to /payments.

        Create a Payment from a Payment Intent

        Args:
            body (object): Payment to create
            trace_id (string, optional): A valid UUID (V4) for tracing
                requests. Will be returned as a header. If not present or
                invalid, a generated UUID will be returned.
            user_agent (string, optional): A string representing the User
                Agent. Required only when the request is not coming from the
                end user's browser.
            end_user_device_id (string, optional): A unique identifier for the
                end user's browser. Recommended for compliance when the
                request is not coming from the end user's browser.
            end_user_ip (string, optional): The IP address of the end user.
                Recommended for compliance when the request is not coming from
                the end user's browser.
            idempotency_key (string, optional): A valid UUID (V4) for handling
                duplicate requests. Will return original status code, response
                body, and set a 'Idempotent-Replay' header on response for a
                given key if a match exists.

        Returns:
            Payment: Response from the API. Payment created successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/payments'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'Trace-Id': trace_id,
            'User-Agent': user_agent,
            'End-User-Device-Id': end_user_device_id,
            'End-User-Ip': end_user_ip,
            'Idempotency-Key': idempotency_key
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorException('Bad Request', _response)
        elif _response.status_code == 401:
            raise ErrorException('Unauthorized', _response)
        elif _response.status_code == 403:
            raise ErrorException('Forbidden', _response)
        elif _response.status_code == 500:
            raise ErrorException('Internal Server Error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Payment.from_dictionary)

        return decoded

    def retrieve_a_paginated_list_of_payments_by_query_parameter_s(self,
                                                                   payer_id,
                                                                   offset=None,
                                                                   limit=None):
        """Does a GET request to /payments.

        Retrieve a paginated list of payments by query parameter(s)

        Args:
            payer_id (uuid|string): The associated Payer ID to list payments
                for
            offset (int, optional): The number of records you wish to skip
                before selecting records
            limit (int, optional): Number of items to return

        Returns:
            PaymentsResponse: Response from the API. A list of Payments

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/payments'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'payerId': payer_id,
            'offset': offset,
            'limit': limit
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorException('Bad Request', _response)
        elif _response.status_code == 401:
            raise ErrorException('Unauthorized', _response)
        elif _response.status_code == 403:
            raise ErrorException('Forbidden', _response)
        elif _response.status_code == 404:
            raise ErrorException('Not found', _response)
        elif _response.status_code == 500:
            raise ErrorException('Internal Server Error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaymentsResponse.from_dictionary)

        return decoded

    def retrieve_a_single_payment(self,
                                  payer_id,
                                  id):
        """Does a GET request to /payments/{id}.

        Retrieve a single Payment

        Args:
            payer_id (uuid|string): The Payer ID associated with the Payment
            id (uuid|string): The ID of the Payment

        Returns:
            Payment: Response from the API. A Payment object

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/payments/{id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'payerId': payer_id
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorException('Bad Request', _response)
        elif _response.status_code == 401:
            raise ErrorException('Unauthorized', _response)
        elif _response.status_code == 403:
            raise ErrorException('Forbidden', _response)
        elif _response.status_code == 404:
            raise ErrorException('Not found', _response)
        elif _response.status_code == 500:
            raise ErrorException('Internal Server Error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Payment.from_dictionary)

        return decoded

    def refund_or_cancel_an_existing_payment(self,
                                             id,
                                             body,
                                             trace_id=None):
        """Does a POST request to /payments/{id}/refunds.

        Refund or cancel an existing Payment

        Args:
            id (uuid|string): The ID of the Payment to refund
            body (PaymentRefundRequest): Payment Refund body
            trace_id (string, optional): A valid UUID (V4) for tracing
                requests. Will be returned as a header. If not present or
                invalid, a generated UUID will be returned.

        Returns:
            PaymentRefund: Response from the API. Payment refunded
                successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/payments/{id}/refunds'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'Trace-Id': trace_id
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorException('Bad Request', _response)
        elif _response.status_code == 401:
            raise ErrorException('Unauthorized', _response)
        elif _response.status_code == 403:
            raise ErrorException('Forbidden', _response)
        elif _response.status_code == 500:
            raise ErrorException('Internal Server Error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaymentRefund.from_dictionary)

        return decoded

    def create_a_payment_intent(self,
                                body,
                                trace_id=None,
                                user_agent=None,
                                end_user_device_id=None,
                                end_user_ip=None):
        """Does a POST request to /payment-intents.

        Create a Payment Intent

        Args:
            body (CreatePaymentIntentRequestPayload): Create a Payment Intent
                object staging it for execution
            trace_id (string, optional): A valid UUID (V4) for tracing
                requests. Will be returned as a header. If not present or
                invalid, a generated UUID will be returned.
            user_agent (string, optional): A string representing the User
                Agent. Required only when the request is not coming from the
                end user's browser.
            end_user_device_id (string, optional): A unique identifier for the
                end user's browser. Recommended for compliance when the
                request is not coming from the end user's browser.
            end_user_ip (string, optional): The IP address of the end user.
                Recommended for compliance when the request is not coming from
                the end user's browser.

        Returns:
            PaymentIntent: Response from the API. Payment Intent created
                successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/payment-intents'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'Trace-Id': trace_id,
            'User-Agent': user_agent,
            'End-User-Device-Id': end_user_device_id,
            'End-User-Ip': end_user_ip
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorException('Bad Request', _response)
        elif _response.status_code == 401:
            raise ErrorException('Unauthorized', _response)
        elif _response.status_code == 403:
            raise ErrorException('Forbidden', _response)
        elif _response.status_code == 500:
            raise ErrorException('Internal Server Error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaymentIntent.from_dictionary)

        return decoded

    def retrieve_a_single_payment_intent(self,
                                         payer_id,
                                         id):
        """Does a GET request to /payment-intents/{id}.

        Retrieve a single Payment Intent

        Args:
            payer_id (uuid|string): The Payer ID of the Payment Intent
            id (uuid|string): The ID of the Payment Intent

        Returns:
            PaymentIntent: Response from the API. A Payment Intent object

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/payment-intents/{id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'payerId': payer_id
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorException('Bad Request', _response)
        elif _response.status_code == 401:
            raise ErrorException('Unauthorized', _response)
        elif _response.status_code == 403:
            raise ErrorException('Forbidden', _response)
        elif _response.status_code == 404:
            raise ErrorException('Not found', _response)
        elif _response.status_code == 500:
            raise ErrorException('Internal Server Error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaymentIntent.from_dictionary)

        return decoded

    def update_a_payment_intent(self,
                                id,
                                body):
        """Does a PATCH request to /payment-intents/{id}.

        Update a Payment Intent

        Args:
            id (uuid|string): The ID of the Payment Intent
            body (PatchPaymentIntentRequestPayload): Payment Intent to update

        Returns:
            PaymentIntent: Response from the API. Payment Intent updated
                successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/payment-intents/{id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorException('Bad Request', _response)
        elif _response.status_code == 401:
            raise ErrorException('Unauthorized', _response)
        elif _response.status_code == 403:
            raise ErrorException('Forbidden', _response)
        elif _response.status_code == 500:
            raise ErrorException('Internal Server Error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaymentIntent.from_dictionary)

        return decoded
